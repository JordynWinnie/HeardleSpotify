@page "/guess"
@inject IJSRuntime Js
@using Data
@inject IConfiguration Configuration

@inject IHttpClientFactory ClientFactory

<PageTitle>Niji-Guess-Saki</PageTitle>

<head>

</head>
@if (song != null)
{

    <body class="font-body">

        <div class="grid grid-cols-3 place-items-center gap-y-4">
            <span class="material-icons">play_circle</span>
            <span class="material-icons">fast_forward</span>
            <span class="material-icons">schedule</span>

            <PlayerComponent MinSeconds=0.0 MaxSeconds=30.0 CurrentTime=@CurrentPlayTime></PlayerComponent>

            <p>Start: @SongPlaysFrom.ToString("00:00")</p>
            <p>Length: @SectionLength s</p>
        </div>

        <div class="flex py-2.5">
            <span class="material-icons">volume_up</span>
            <input type="range" min="0" max="100" @bind-value=@Volume class="w-full ml-2">
        </div>

        <div class="flex py-2">
            <button class="bg-pink-500 hover:bg-pink-700 btn w-1/2 mr-2" onclick="playAudio(@SongPlaysFrom)">
                Play Section
            </button>
            <button class="bg-pink-500 hover:bg-pink-700 btn w-1/2" @onclick="IncreaseTime">Increase Time</button>
        </div>

        @if (!showSong)
        {
            <button class="bg-orange-500 hover:bg-orange-700 btn w-full" @onclick="@(() => RevealSong())">
                Reveal Song
            </button>
        }
        else
        {
            <button class="bg-orange-500 hover:bg-orange-700 btn w-full" @onclick="RefreshSong">Refresh
                Song</button>
        }

        <div class="flex py-2">
            <button class="bg-orange-500 hover:bg-orange-700 btn w-full" @onclick="RefreshSong">Force Refresh
                Song</button>
        </div>

        @if (showSong)
        {
            <SongComponent song=@song></SongComponent>
            <div class="flex py-2">
                <button class="bg-green-500 hover:bg-green-700 btn w-full py-2" onclick="playAudio(0.0)">
                    Play From Beginning
                </button>
            </div>
        }

        <audio id="audioPlayer" @ontimeupdate="TimeUpdate" @onplaying="OnPlaying" @onpause="OnStop"></audio>
    </body>
}
@code {
    public string PlayingMessage { get; set; } = "";
    public double SectionLength = 1.0;
    public double CurrentPlayTime = 0.0;
    private int volume = 15;
    public int Volume
    {
        get
        {
            return volume;
        }
        set
        {
            volume = value;
            SetAudioVolume(value);

        }
    }
    private Song _song = new Song();
    public Song song
    {
        get
        {
            return _song;
        }
        set
        {
            _song = value;
            LoadAudio(_song.track!.preview_url!);
        }
    }

    public List<Song> playListItems = new List<Song>();
    public bool showSong { get; set; } = false;


    public int SongPlaysFrom { get; set; } = 0;
    bool IsPlaying { get; set; }

    //private ElementReference Audio { get; set; }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Authentication for Playlist:
            var client_id = Configuration.GetSection("NGSClientId").Value;
            var client_secret = Configuration.GetSection("NGSClientSecret").Value;
            var client = ClientFactory.CreateClient();

            var tokenRequest = await client.SendAsync(Endpoints.GetToken(client_id, client_secret));
            var token = await tokenRequest.Content.ReadFromJsonAsync<SpotifyToken>();

            var playlistInfoRequest = await client.SendAsync(Endpoints.GetPlayListInfo(token, "7ulKXEl7j07T22foLPNzvU"));
            var playListInfo = await playlistInfoRequest.Content.ReadFromJsonAsync<PlaylistInfo>();

            var playListSongRequest = await client.SendAsync(Endpoints.GetPlayListSongs(token, playListInfo!.id!));
            var playListSongs = await playListSongRequest.Content.ReadFromJsonAsync<SpotifyPlaylist>();

            playListItems = playListSongs!.items!.Where(x => x.track!.preview_url != null).ToList();

            var randomSongNum = Random.Shared.Next(0, playListItems.Count);
            var randomSong = playListItems[randomSongNum];
            SongPlaysFrom = Random.Shared.Next(0, 25);
            CurrentPlayTime = SongPlaysFrom;
            song = randomSong;

            SetAudioVolume(volume);
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private void SetAudioVolume(int volume)
    {
        var newVol = volume / 100.0f;
        Js.InvokeVoidAsync("setVolume", newVol).GetAwaiter();
    }
    private void PlayAudio(float startDuration)
    {
        Js.InvokeVoidAsync("playAudio", startDuration).GetAwaiter();
    }

    private void LoadAudio(string sourceLink)
    {
        Console.WriteLine("Force Audio Load");
        Js.InvokeVoidAsync("loadAudio", sourceLink).GetAwaiter();
    }

    private void StopAudio() =>
    Js.InvokeVoidAsync("stopAudio").GetAwaiter();

    public void IncreaseTime()
    {
        SectionLength += 0.5f;
    }
    public void RefreshSong()
    {
        var randomSongNum = Random.Shared.Next(0, playListItems.Count);
        var randomSong = playListItems[randomSongNum];

        song = randomSong;

        showSong = false;
        SectionLength = 0.5f;
        SongPlaysFrom = Random.Shared.Next(0, 25);
        CurrentPlayTime = SongPlaysFrom;
        StopAudio();
    }

    public void RevealSong()
    {
        showSong = !showSong;
        if (showSong)
            PlayAudio(SongPlaysFrom);
        else
            StopAudio();
    }
    private async void TimeUpdate(EventArgs e)
    {
        var result = await Js.InvokeAsync<string>("returnDuration");
        var time = double.Parse(result);
        if (!showSong)
        {
            if ((time - SongPlaysFrom) > SectionLength)
            {
                StopAudio();
            }
        }

        if (time == 0)
        {
            return;
        }
        CurrentPlayTime = time;
    }

    private void OnPlaying()
    {
        PlayingMessage = "Now Playing";
    }

    private void OnStop()
    {
        PlayingMessage = "Audio Stopped";
    }
}
