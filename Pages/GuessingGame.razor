@page "/guess"
@using System.Net.Http.Headers
@inject IJSRuntime Js
@using Data

@inject IConfiguration Configuration

@inject IHttpClientFactory ClientFactory

<PageTitle>NijiguesSaki</PageTitle>
@if (song != null)
{
    <h1>Niji-Guess-Saki</h1>

    <h3>Current Play Period: @CurrentTime seconds</h3>
    <h3>Song Started From: @SongPlaysFrom </h3>
    <input type="range" min="0" max="100" @bind-value=@Volume>
    <br>
    <button onclick="playAudio(@SongPlaysFrom)">
        Play Audio
    </button>
    <br>
    <button @onclick="@(() => RevealSong())">
        Reveal Song
    </button>
    <br>
    <button @onclick="IncreaseTime">Increase Time</button>
    <br>
    <button @onclick="RefreshSong">Refresh Song</button>
    <br>
    <audio id="audioPlayer" @ontimeupdate="TimeUpdate" @oncanplaythrough="CanPlayThrough">
    </audio>
    <br>
    @if (showSong)
    {
        <img src="@song.track!.album!.images!.Where(x => x.height == 640).FirstOrDefault()!.url" width="350">
        <h1>@song.track.name</h1>
        <p1>Sung By: @String.Join(", " , song!.track!.artists!.Select(x=>x.name))</p1>
        <br>
        <p1>Album: @song!.track!.album.name</p1>
    }
}

@code {
    private int volume = 15;
    public int Volume
    {
        get
        {
            return volume;
        }
        set
        {
            volume = value;
            SetAudioVolume(value);

        }
    }
    public Song? song = null;

    public SpotifyPlaylist? playListItems = null;
    public bool showSong { get; set; } = false;
    public float CurrentTime { get; set; } = 0.5f;

    public int SongPlaysFrom { get; set; } = 0;
    bool IsPlaying { get; set; }

    //private ElementReference Audio { get; set; }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Authentication for Playlist:
            var client_id = Configuration.GetSection("NGSClientId").Value;
            var client_secret = Configuration.GetSection("NGSClientSecret").Value;

            var content = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("grant_type", "client_credentials") });
            var authenticationString =
            Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{client_id}:{client_secret}"));

            var bearerTokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://accounts.spotify.com/api/token");
            bearerTokenRequest.Headers.Authorization = new AuthenticationHeaderValue("Basic", authenticationString);
            bearerTokenRequest.Content = content;
            var client = ClientFactory.CreateClient();
            var result = await client.SendAsync(bearerTokenRequest);
            var token = await result.Content.ReadFromJsonAsync<SpotifyToken>();


            // Get Song:
            var playList_id = "7ulKXEl7j07T22foLPNzvU";
            var songRequest = new HttpRequestMessage(HttpMethod.Get,
            $"https://api.spotify.com/v1/playlists/{playList_id}/tracks?fields=items(track(name%2Cid%2Cpreview_url%2Cartists(name)%2Calbum(images%2Cname)))");
            songRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token?.access_token);
            var loveliveItem = await client.SendAsync(songRequest);
            playListItems = await loveliveItem.Content.ReadFromJsonAsync<SpotifyPlaylist>();

            Random rnd = new Random();
            var randomSongNum = rnd.Next(0, playListItems!.items!.Length);
            var randomSong = playListItems.items[randomSongNum]!;
            SongPlaysFrom = rnd.Next(0, 25);
            song = randomSong;
            StateHasChanged();
            LoadAudio(randomSong!.track!.preview_url!);
            SetAudioVolume(volume);
            Console.WriteLine(playListItems.items.Length);
        }

        base.OnAfterRender(firstRender);
    }

    private void SetAudioVolume(int volume)
    {
        var newVol = volume / 100.0f;
        Js.InvokeVoidAsync("setVolume", newVol).GetAwaiter();
    }
    private void PlayAudio(float startDuration)
    {
        Js.InvokeVoidAsync("playAudio", startDuration).GetAwaiter();
    }

    private void LoadAudio(string sourceLink) =>
    Js.InvokeVoidAsync("loadAudio", sourceLink).GetAwaiter();


    private void StopAudio() =>
    Js.InvokeVoidAsync("stopAudio").GetAwaiter();

    public void IncreaseTime()
    {
        CurrentTime += 0.5f;
    }
    public void RefreshSong()
    {
        Random rnd = new Random();
        var randomSongNum = rnd.Next(0, playListItems!.items!.Length);
        var randomSong = playListItems.items[randomSongNum]!;

        song = randomSong;

        showSong = false;
        CurrentTime = 0.5f;
        SongPlaysFrom = rnd.Next(0, 25);
        StopAudio();
        LoadAudio(randomSong!.track!.preview_url!);
    }

    public void RevealSong()
    {
        showSong = !showSong;

        CurrentTime = 30.0f;
        if (showSong)
            PlayAudio(0.0f);
        else
            StopAudio();

    }
    private async void TimeUpdate(EventArgs e)
    {
        if (showSong) return;
        var result = await Js.InvokeAsync<string>("returnDuration");
        var songDuration = float.Parse(result);
        if ((songDuration - SongPlaysFrom) > CurrentTime)
        {
            StopAudio();
        }
    }

    private void CanPlayThrough()
    {
        Console.WriteLine("Can play through");
    }
}
