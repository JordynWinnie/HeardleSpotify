@page "/"
@inject IJSRuntime Js
@using Microsoft.Extensions.Configuration
@using System.Net.Http.Headers
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory

<PageTitle>NijiguesSaki</PageTitle>

<h1>Setup Page</h1>

<input type="text" @bind="SongLink">
<p>@ErrorMessage</p>
<br>
<p>You may paste these types of links:</p>
<ul>
    <li>Spotify Playlist Link, e.g.: https://open.spotify.com/playlist/7ulKXEl7j07T22foLPNzvU?si=5a7d6176fb0547f7</li>
    <li>Playlist Id, e.g.: 7ulKXEl7j07T22foLPNzvU</li>
</ul>

<button @onclick=@TestValue disabled=@(PlaylistStatus.Contains("Checking"))>@PlaylistStatus</button>

@code {
    public string SongLink { get; set; } = String.Empty;
    public string PlaylistStatus { get; set; } = "Check Playlist";

    public string ErrorMessage { get; set; } = string.Empty;
    public async void TestValue()
    {
        ErrorMessage = string.Empty;
        PlaylistStatus = "Checking Playlist";

        // Check Empty Song List:
        if (SongLink.Equals(string.Empty))
        {
            ErrorMessage = "No link was pasted";
            return;
        }
        // Check if Starts with Spotify Link:
        if (!SongLink.StartsWith("https://open.spotify.com/playlist/") && SongLink.Length > 22)
        {
            ErrorMessage = "Invalid Spotify Link detected";
        }
        try
        {
            var tempSongLink = SongLink.Replace("https://open.spotify.com/playlist/", string.Empty);
            tempSongLink = tempSongLink.Substring(0, 22);
            var token = await GetSpotifyToken();

            if (token is null)
            {
                ErrorMessage = "Unable to communicate with Spotify Servers.";
            }
            else
            {

            }

        }
        catch (ArgumentOutOfRangeException)
        {
            ErrorMessage = "Invalid Spotify Link detected";
        }
        catch (Exception e)
        {
            ErrorMessage = $"Error: {e}";
        }
        finally
        {

            PlaylistStatus = "Check Playlist";

        }

        PlaylistStatus = "Check Playlist";
        StateHasChanged();
    }

    public async Task<SpotifyToken?> GetSpotifyToken()
    {
        var client = ClientFactory.CreateClient();
        var client_id = Configuration.GetSection("NGS:ClientId").Value;
        var client_secret = Configuration.GetSection("NGS:ClientSecret").Value;

        var content = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("grant_type", "client_credentials") });
        var authenticationString =
        Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{client_id}:{client_secret}"));

        var bearerTokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://accounts.spotify.com/api/token");
        bearerTokenRequest.Headers.Authorization = new AuthenticationHeaderValue("Basic", authenticationString);
        bearerTokenRequest.Content = content;

        try
        {
            var result = await client.SendAsync(bearerTokenRequest);
            result.EnsureSuccessStatusCode();
            return await result.Content.ReadFromJsonAsync<SpotifyToken>();

        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("Exception Caught");
            return null;
        }
        catch (Exception)
        {
            Console.WriteLine("Exception Caught");
            return null;
        }

    }
}